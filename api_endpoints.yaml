swagger: "2.0"
info:
  description: "This is the API documentations for [CoderHeroes](https://www.coderheroes.com)."
  version: "1.0.0"
  title: "CoderHeroes"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:8080"
tags:
- name: "profile"
  description: "Information about Profiles"
- name: "user"
  description: "Individual users in a profile"
- name: "parent"
  description: "Information about parent users"
schemes:
- "https"
- "http"
paths:
  /profile:
    get:
      tags:
        - "profile"
      summary: "Retrieves all existing profiles"
      description: "This endpoint uses a get request to retrieve all profiles"
      operationId: "findAll"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Valid input"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Profile"
            example:
              testProfile1:
                value:
                  profile_id: 10
                  email: "test@email.com"
                  name: "bob"
                  auth0_id: "234234923742983"
                  role: "admin"
                  avatarUrl: "profileImageUrl"
                  pending: "accountStatus"
              testProfile2:
                value:
                  profile_id: 10
                  email: "test@email.com"
                  name: "bob"
                  auth0_id: "234234923742983"
                  role: "admin"
                  avatarUrl: "profileImageUrl"
                  pending: "accountStatus"    
        "405":
          description: "Invalid input"
      security:
      - profile_auth:
        - "read:profile"
    post:
      tags:
      - "profile"
      summary: "creates a new profile"
      description: "Requires a name and email. Registers a new user"
      operationId: "create"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - in: "body"
          name: "user"
          description: "The user to create"
          schema:
            type: "object"
            required: 
              - "firstname"
              - "lastname"
              - "email"
            properties:
              firstname:
                type: "string"
              lastname:
                type: "string"
              email:
                type: "string"
      responses:
        "201":
          description: "Profile created"
        "400":
          description: "Invalid Email supplied"
      security:
      - profile_auth:
        - "write:profile"
  /profile/{profile_id}:
    get:
      tags:
      - "profile"
      summary: "Finds a proflie by profileId"
      description: "uses a profile Id to find a profile with its attached users"
      operationId: "findById"
      produces:
      - "application/json"
      parameters:
      - name: "profile_id"
        in: "path"
        description: "profile_id to find the corresponding profile"
        required: true
        type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Profile"
        "400":
          description: "invalid profile id"
        "404":
          description: "profile not found"
      security:
      - profile_auth:
        - "read:profile"
        
    put:
      tags:
      - "profile"
      summary: "Updated a profile"
      description: "Update a user profile."
      operationId: "update"
      produces:
      - "application/json"
      parameters:
      - name: "profile_id"
        in: "path"
        description: "profile_id to update the corresponding profile"
        required: true
        type: "integer"
      responses:
        "200":
            description: "successful operation"
            schema:
              type: "array"
              items:
                $ref: "#/definitions/Profile"
        "400":
          description: "invalid profile id"
        "404":
          description: "profile not found"
      security:
      - profile_auth:
        - "read:profile"
        - "write:profile"
  /profile/role/{role_id}:
    get:
      tags:
      - "profile"
      summary: "Finds all profiles by role_id"
      description: "Use role_id to find all associated profiles"
      operationId: "findByRoleId"
      produces:
      - "application/json"
      parameters:
      - name: "role_id"
        in: "path"
        description: "role_id to filter by"
        required: true
        type: "string"
        items:
          type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Profile"
            example:
              testProfile1:
                value:
                  profile_id: 10
                  email: "test@email.com"
                  name: "bob"
                  auth0_id: "234234923742983"
                  role: "admin"
                  avatarUrl: "profileImageUrl"
                  pending: "accountStatus"
              testProfile2:
                value:
                  profile_id: 10
                  email: "test@email.com"
                  name: "bob"
                  auth0_id: "234234923742983"
                  role: "admin"
                  avatarUrl: "profileImageUrl"
                  pending: "accountStatus"     
        "400":
          description: "Invalid role_id"
        "404":
          description: "no profiles associated with that role_id."  
      security:
      - profile_auth:
        - "read:profile"
  /user:
    get:
      tags:
      - "user"
      summary: "Returns an event object with the specified type"
      description: "This can only be done by the logged in user."
      operationId: "findUserData"
      produces:
      - "application/json"
      responses:
        default:
          description: "successful operation"
      security:
       - basic_auth: []
  /user/inbox:
    get:
      tags:
      - "user"
      summary: "Returns an event object"
      description: "This can only be done by the logged in user."
      operationId: "getInbox"
      produces:
      - "application/json"
      responses:
        default:
          description: "successful operation"
      security:
       - basic_auth: []
  /user/schedules:
    get:
      tags:
      - "user"
      summary: "Returns an event object"
      description: "This can only be done by the logged in user."
      operationId: "getSchedule"
      produces:
      - "application/json"
      responses:
        default:
          description: "successful operation"
      security:
       - basic_auth: []
  /user/{user_id}:
    put:
      tags:
      - "user"
      summary: "Updates specific user"
      description: "Returns an event object with the specified user_id. Updates specific user"
      operationId: "updateUserData"
      produces:
      - "application/json"
      parameters:
      - name: "user_id"
        in: "path"
        description: "The logged-in user_id"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
      security:
       - basic_auth: []
  /user/register:
    post:
      tags:
      - "user"
      summary: "Register a new user"
      description: "Register a new user in the database and in the Okta Dashboard"
      operationId: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - in: "body"
          name: "user"
          description: "The user to create"
          schema:
            type: "object"
            required:
              - "firstname"
              - "lastname"
              - "email"
            properties:
              firstname:
                type: "string"
              lastname:
                type: "string"
              email:
                type: "string"
      responses:
        "201":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Bad request"
  /parent/{profile_id}/children/:
    get:
      tags:
      - "parent"
      summary: "Find the children users"
      description: "Returns an array of the children that are attached to the given parents profile"
      operationId: "getChildrenByProfileId"
      produces:
      - "application/json"
      parameters:
      - name: "profile_id"
        in: "path"
        description: "Id of profile to use to find corresponding users"
        required: true
        type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Children"
        "400":
          description: "Invalid profile_Id"
        "404":
          description: "Profile not found"
      security:
      - profile_auth:
        - "read:profile"
  /parent/{profile_id}/schedules/:
    get:
      tags:
      - "parent"
      summary: "retrieves the profiles schedules"
      description: "returns an array of schedules associated with the give profile"
      operationId: "getSchedulesByProfileId"
      produces:
      - "application/json"
      parameters:
      - name: "profile_id"
        in: "path"
        description: "ID of profile to get schedules from"
        required: true
        type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#definitions/Course"
        "400":
          description: "Invalid profile_id"
        "404":
          description: "Profile not found"
      security:
      - profile_auth:
        - "read:profile"
  /children:
    get:
      tags:
        - "child"
      summary: "Retrieves all existing children"
      description: "Returns an array containing all existing children"
      operationId: "getChildren"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Valid input"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Children"
            example:
              child1:
                value:
                  child_id: 10
                  profile_id: 10
                  username: "username"
                  age: 10
                  parent_id: 10
              child2:
                value:
                  child_id: 10
                  profile_id: 10
                  username: "username"
                  age: 10
                  parent_id: 10
        "405":
          description: "Invalid input"
      security:
      - child_auth:
        - "read:child"
    post:
      tags:
        - "child"
      summary: "Creates a new child/student profile"
      description: "Requires a username, name, and age. Returns the name, profile_id and parent_id"
      operationId: "addChild"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - in: "body"
          name: "student"
          description: "The student profile to create"
          schema:
            type: "object"
            required:
              - "username"
              - "name"
              - "age"
            properties:
              username:
                type: "string"
              name:
                type: "string"
              age:
                type: "integer"
      responses:
        "201":
          description: "Student profile created"
          schema:
            type: "object"
            properties:
              name:
                type: "string"
              profile_id:
                type: "integer"
              parent_id:
                type: "integer"
        "400":
          description: "Invalid values"
      security:
      - child_auth:
        - "write:child"
  /children/{child_id}:
    get:
      tags:
        - "child"
      summary: "Retrieves the child profile associated with the given ID"
      description: "Returns child object associated with given ID"
      operationId: "findByChildId"
      produces:
        - "application/json"
      parameters:
        - name: "child_id"
          in: "path"
          description: "ID of child to return"
          required: true
          type: "integer"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Children"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Child not found"
    put:
      tags:
        - "child"
      summary: "Updates the child profile associated with the given ID"
      description: "Updates the child object associated with the given ID and then returns updated version"
      operationId: "updateChild"
      produces:
        - "application/json"
      parameters:
        - name: "child_id"
          in: "path"
          description: "ID of child that needs to be updated"
          required: true
          type: "integer"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Children"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Child not found"
    delete:
      tags:
        - "child"
  /children/{child_id}/enrollments:
    get:
      tags:
        - “child”
    post:
      tags:
        - “child”
  /children/{child_id}/enrollments/{course_id}:
    delete:
      tags:
        - "child"   
  /instructor/courses/:
    get:
      tags:
      - "instructor"
      summary: "retrieves courses"
      description: "Returns an array of courses attached to the currently logged-in instructor"
      operationId: "findInstructorCourses"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Course"
            example:
              Courses:
                valuse:
                  course_id: 245
                  course_name: "intro to java"
                  course_description: "this course is an intro to java"
                  created_on: January 1, 2022
                  days_of_week: ["Monday", "Tuesday", "Wednesday"]
                  max_size: 14
                  enrolled_students: 5
                  mins_age: 13
                  max_age: 18
                  instructor: Elizabeth Taylor
                  program: Java
                  start_time: 11:00
                  end_time: 12:00
                  start_date: January 5, 2022
                  end_date: January 17, 2022
                  number_of_sessions: 6
                  difficulty: "easy"
                  session_type: "group"
                  syllabus_link: "syllabus link"
      security:
      - profile_auth:
        - "read:profile"
  /instructor/register:
    post:
      tags:
      - "instructor"
      summary: "Register an instructor"
      description: "Registers and instructor with data"
      operationId: "registerInstructor"
      produces:
      - "application/json"
      parameters:
        - in: "body"
          name: "user"
          description: "The user to register as instructor"
          schema:
            type: "object"
            required: 
              - "firstname"
              - "lastname"
              - "email"
            properties:
              firstname:
                type: "string"
              lastname:
                type: "string"
              email:
                type: "string"
      responses:
        "201":
          description: "Instructor registered"
      security:
      - profile_auth:
        - "write:profile"
  /instructor/{instrucor_id}/update:
    put:
        tags:
        - "instructor"
        summary: "Updated a profile"
        description: "Update a user profile."
        operationId: "update"
        produces:
        - "application/json"
        parameters:
        - name: "instructor_id"
          in: "path"
          description: "instructor_id to update the corresponding profile"
          required: true
          type: "integer"
        responses:
          "200":
              description: "successful operation"
              schema:
                type: "array"
                items:
                  $ref: "#/definitions/Profile"
          "400":
            description: "invalid instructor id"
          "404":
            description: "profile not found"
        security:
        - profile_auth:
          - "read:profile"
          - "write:profile"
  /instructor/{instructor_id}/delete:
    delete:
  /program:
    get:
      tags:
      - "program"
      summary: "Returns an array filled with program objects"
      description: ""
      operationId: "getAll"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
    post:
      tags:
      - "program"
      summary: "Register a new program"
      description: "Register a new program in the database"
      operationId: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - in: "body"
          name: "program"
          description: "The program to create"
          schema:
            type: "object"
            required:
              - "program_name"
              - "program_description"
            properties:
              program_name:
                type: "string"
              program_description:
                type: "string"
      responses:
        "201":
          description: "successful operation"
        "400":
          description: "Bad request"
  /program/{program_id}:
    get:
      tags:
      - "program"
      summary: "Returns the program object with the specified id"
      description: ""
      operationId: "getById"
      consumes :
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "program_id"
        in: "path"
        description: "program id"
        type: "string"
        required: true
      responses:
        "200":
          description: "successful operation"
    put:
      tags:
      - "program"
      summary: "Updates the program object with the specified id"
      description: ""
      operationId: "update"
      consumes :
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "program_id"
        in: "path"
        description: "program id"
        type: "string"
        required: true
      responses:
        "200":
          description: "successful operation"
    delete:
      tags:
      - "program"
      summary: "Removes the program with the specified id"
      description: ""
      operationId: "remove"
      produces:
      - "application/json"
      parameters:
      - name: "program_id"
        in: "path"
        description: "program id"
        type: "string"
        required: true
      responses:
        "200":
          description: "successful operation"
  /course
    get:
    post:
  /course/{course_id}
    get:
    put:
    delete:
  /newsfeed/
    get:
    post:
  /newsfeed/{newsfeed_id}
    get:
    put:
    delete:
  /conversation_id/
    get:
    post:
  /conversation_id/{profile_id}
    get:
    put:
    delete:
  /conversation_id/messages/
    post:
  /calender-events/
    get:
    post:
  /calender-events/user/
    get:
  /calender-events/{event_id}
    get:
    put:
    delete:
  /schedule
    get:
    post:
    put:
  /schedule/{id}
    get:
    delete:
  /schedule/sessions
    post:
securityDefinitions:
  profile_auth:
    type: "oauth2"
    authorizationUrl: ""
    tokenUrl: ""
    flow: "accessCode"
    scopes:
      read:profile: "read a profile"
      write:profile: "write a profile"
  child_auth:
    type: "oauth2"
    authorizationUrl: ""
    tokenUrl: ""
    flow: "accessCode"
    scopes:
      read:child: "read a child profile"
      write:child: "write a child profile"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
    
    
definitions:
  Profile:
    type: "object"
    properties:
      profile_id:
        type: "integer"
        format: "int64"
      email:
        type: "string"
      name:
        type: "string"
      auth0_id:
        type: "string"
      role:
        type: "string"
        description: "Role status"
        enum:
        - "super_admin"
        - "admin"
        - "instructor"
        - "parent"
        - "user"
      avatarUrl:
        type: "string"
      pending:
        type: "string"
  Course:
    type: "object"
    properties:
      course_id:
        type: "integer"
        format: "int64"
      course_name:
        type: "string"
      course_description:
        type: "string"
      created_on:
        type: "object"
        format: "Month/Day/Year"
      days_of_week:
        type: "string array"
      max_size:
        type: "integer"
      enrolled_students:
        type: "integer"
      min_age:
        type: "integer"
      max_age: 
        type: "integer"
      instructor:
        type: "object"
      program:
        type: "object"
      start_time:
        type: "object"
      end_time:
        type: "object"
      start_date:
        type: "object"
        format: "Month/Day/Year"
      end_date:
        type: "object"
        format: "Month/Day/Year"
      number_of_sessions:
        type: "integer"
      difficulty:
        type: "string"
      session_type:
        type: "string"
      syllabus_link:
        type: "string"
  Children:
    type: "object"
    properties:
      child_id:
        type: "integer"
        format: "int64"
        example: 123
      profile:
        type: "integer"
        example: 423
      username:
        type: "string"
        example: "Billy"
      age:
        type: "integer"
        example: 32
      parents:
        type: "object"
        example: 341
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Pet:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "pet status in the store"
        enum:
        - "available"
        - "pending"
        - "sold"
    xml:
      name: "Pet"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"